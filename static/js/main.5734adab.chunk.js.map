{"version":3,"sources":["calendar.jsx","reportWebVitals.js","index.js"],"names":["styles","theme","cell","color","position","userSelect","verticalAlign","padding","height","borderLeft","paddingRight","borderBottom","backgroundColor","content","display","justifyContent","width","alignItems","text","textAlign","sun","cloud","rain","sunBack","cloudBack","rainBack","opacity","appointment","borderRadius","apptContent","whiteSpace","lineHeight","flexibleSpace","flex","flexContainer","tooltipContent","spacing","paddingTop","palette","background","paper","boxSizing","tooltipText","typography","body2","title","h6","secondary","fontWeight","fontWeightBold","overflow","textOverflow","icon","action","active","circle","textCenter","dateAndTitle","titleContainer","paddingBottom","container","schedulerData","startDate","endDate","getDateFormat","date","String","getDate","padStart","getMonth","getFullYear","isWeekend","day","getDay","CellBase","React","memo","classes","formatDate","otherMonth","today","Date","TableCell","className","classNames","TimeTableCell","withStyles","name","ButtonProps","restProps","Button","startIcon","Appointment","Container","id","Paper","data","firstDayOfWeek","timeTableCellComponent","buttonComponent","appointmentComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5734adab.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport { ViewState } from \"@devexpress/dx-react-scheduler\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport classNames from \"clsx\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport EventIcon from \"@material-ui/icons/Event\";\r\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport {\r\n  Scheduler,\r\n  MonthView,\r\n  Appointments,\r\n  Toolbar,\r\n  DateNavigator,\r\n  TodayButton\r\n} from \"@devexpress/dx-react-scheduler-material-ui\";\r\n\r\nimport \"./App.scss\";\r\n\r\nconst styles = (theme) => ({\r\n  cell: {\r\n    color: \"#78909C!important\",\r\n    position: \"relative\",\r\n    userSelect: \"none\",\r\n    verticalAlign: \"top\",\r\n    padding: 0,\r\n    height: 100,\r\n    \"&:first-child\": {\r\n      borderLeft: \"none\",\r\n    },\r\n    \"&:last-child\": {\r\n      paddingRight: 0,\r\n    },\r\n    \"tr:last-child &\": {\r\n      borderBottom: \"none\",\r\n    },\r\n    \"&:hover\": {\r\n      backgroundColor: \"white\",\r\n    },\r\n  },\r\n  content: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    alignItems: \"center\",\r\n  },\r\n  text: {\r\n    padding: \"0.5em\",\r\n    textAlign: \"center\",\r\n  },\r\n  sun: {\r\n    color: \"#FFEE58\",\r\n  },\r\n  cloud: {\r\n    color: \"#90A4AE\",\r\n  },\r\n  rain: {\r\n    color: \"#4FC3F7\",\r\n  },\r\n  sunBack: {\r\n    backgroundColor: \"#FFFDE7\",\r\n  },\r\n  cloudBack: {\r\n    backgroundColor: \"#ECEFF1\",\r\n  },\r\n  rainBack: {\r\n    backgroundColor: \"#E1F5FE\",\r\n  },\r\n  opacity: {\r\n    opacity: \"0.1\",\r\n  },\r\n  appointment: {\r\n    borderRadius: \"10px\",\r\n    \"&:hover\": {\r\n      opacity: 0.6,\r\n    },\r\n  },\r\n  apptContent: {\r\n    \"&>div>div\": {\r\n      whiteSpace: \"normal !important\",\r\n      lineHeight: 1.2,\r\n    },\r\n  },\r\n  flexibleSpace: {\r\n    flex: \"none\",\r\n  },\r\n  flexContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  tooltipContent: {\r\n    padding: theme.spacing(3, 1),\r\n    paddingTop: 0,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxSizing: \"border-box\",\r\n    width: \"400px\",\r\n  },\r\n  tooltipText: {\r\n    ...theme.typography.body2,\r\n    display: \"inline-block\",\r\n  },\r\n  title: {\r\n    ...theme.typography.h6,\r\n    color: theme.palette.text.secondary,\r\n    fontWeight: theme.typography.fontWeightBold,\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\",\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n  icon: {\r\n    color: theme.palette.action.active,\r\n    verticalAlign: \"middle\",\r\n  },\r\n  circle: {\r\n    width: theme.spacing(4.5),\r\n    height: theme.spacing(4.5),\r\n    verticalAlign: \"super\",\r\n  },\r\n  textCenter: {\r\n    textAlign: \"center\",\r\n  },\r\n  dateAndTitle: {\r\n    lineHeight: 1.1,\r\n  },\r\n  titleContainer: {\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  container: {\r\n    paddingBottom: theme.spacing(1.5),\r\n  },\r\n});\r\n\r\nconst schedulerData = [\r\n  {\r\n    startDate: \"2021-01-01T09:45\",\r\n    endDate: \"2021-01-01T11:00\",\r\n    title: \"Meeting 01\",\r\n  },\r\n  {\r\n    startDate: \"2021-01-04T12:00\",\r\n    endDate: \"2021-01-04T13:30\",\r\n    title: \"Meeting 02\"\r\n  },\r\n  {\r\n    startDate: \"2021-01-05T12:00\",\r\n    endDate: \"2021-01-05T13:30\",\r\n    title: \"Meeting 03\"\r\n  }\r\n];\r\n\r\nconst getDateFormat = (date) => {\r\n  let dd = String(date.getDate()).padStart(2, \"0\");\r\n  let mm = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  let yyyy = String(date.getFullYear());\r\n  return dd + \"-\" + mm + \"-\" + yyyy;\r\n};\r\n\r\nconst isWeekend = date => {\r\n  const day = date.getDay();\r\n  return day === 0 || day === 6;\r\n}\r\n\r\nconst CellBase = React.memo(\r\n  ({ classes, startDate, formatDate, otherMonth }) => {\r\n    const today = new Date();\r\n\r\n    return (\r\n      <TableCell\r\n        className={classNames({\r\n          [classes.cell]: true,\r\n          [classes.opacity]: otherMonth,\r\n        })}\r\n      >\r\n        <div className={`dateCell ${getDateFormat(today) == getDateFormat(startDate) ? \"todayCell\" : \"\" } ${isWeekend(startDate) ? \"disable-date\" : \"\"}`}>\r\n          {formatDate(startDate, { day: \"numeric\" })}\r\n        </div>\r\n      </TableCell>\r\n    );\r\n  }\r\n);\r\n\r\nconst TimeTableCell = withStyles(styles, { name: \"Cell\" })(CellBase);\r\nconst ButtonProps = withStyles(styles, {\r\n  name: \"Button\",\r\n})(({ classes, ...restProps }) => (\r\n  <TodayButton.Button {...restProps} startIcon={<EventAvailableIcon />} />\r\n));\r\n\r\nconst views = [{\r\n  type: 'month',\r\n  name: 'Numeric Mode',\r\n  maxAppointmentsPerCell: 1\r\n}];\r\n\r\n\r\nconst Appointment = withStyles(styles, { name: 'Appointment' })(({ classes, ...restProps }) => (\r\n  <Appointments.Appointment\r\n    {...restProps}\r\n    className={`appointment-cell ${classes.appointment}`}\r\n  />\r\n));\r\n\r\nexport default () => (\r\n  <Container id=\"app-calender\" className=\"my-4\">\r\n    <Paper>\r\n      <Scheduler \r\n        data={schedulerData} \r\n        firstDayOfWeek={1} >\r\n        <ViewState />\r\n        <MonthView timeTableCellComponent={TimeTableCell} />\r\n        <Toolbar />\r\n        <DateNavigator />\r\n        <TodayButton buttonComponent={ButtonProps} />\r\n        <Appointments \r\n          appointmentComponent={Appointment}\r\n        />\r\n      </Scheduler>\r\n    </Paper>\r\n  </Container>\r\n);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calender from './calendar';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calender />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}